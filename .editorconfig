# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# C# files
[*.cs]
charset = utf-8

#########################################################
########### Core EditorConfig Options 
#########################################################

# Indentation and spacing
indent_size = 4
# use tabs for indentation
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
# ensure file does not end with a newline
insert_final_newline = false

#########################################################
########### .NET Coding Conventions 
#########################################################


########### Organize usings ########### 
# Do not place a blank line between using directive groups.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
dotnet_separate_import_directive_groups = false
# Sort System.* using directives alphabetically, and place them before other using directives.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
dotnet_sort_system_directives_first = true
# Do not require file header.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0073
file_header_template = unset

########## this. and Me. preferences  ###########
#prefer events not to be prefaced with this. or Me.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009#dotnet_style_qualification_for_event
dotnet_style_qualification_for_event = false:warning
#prefer fields not to be prefaced with this. or Me.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009#dotnet_style_qualification_for_field
dotnet_style_qualification_for_field = false:warning
#prefer methods not to be prefaced with this. or Me.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009#dotnet_style_qualification_for_method
dotnet_style_qualification_for_method = false:warning
# prefer properties not to be prefaced with this. or Me.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009#dotnet_style_qualification_for_property
dotnet_style_qualification_for_property = false:warning

########## Language keywords vs BCL types preferences  ###########
# Prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
# Prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049#dotnet_style_predefined_type_for_member_access
dotnet_style_predefined_type_for_member_access = true:silent

########## Parentheses preferences  ###########
# Prefer parentheses to clarify arithmetic operator (*, /, %, +, -, <<, >>, &, ^, |) precedence
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048#dotnet_style_parentheses_in_arithmetic_binary_operators
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
# Prefer parentheses to clarify other binary operator (&&, ||, ??) precedence
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048#dotnet_style_parentheses_in_other_binary_operators
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
# Prefer to not have parentheses when operator precedence is obvious
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048#dotnet_style_parentheses_in_other_operators
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
# Prefer parentheses to clarify relational operator (>, <, <=, >=, is, as, ==, !=) precedence
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048#dotnet_style_parentheses_in_relational_binary_operators
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning


########## Modifier preferences ###########
# prefer accessibility modifiers to be declared except for public interface members. 
# This will currently not differ from always and will act as future proofing for if C# adds default interface method
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0040#dotnet_style_require_accessibility_modifiers
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

########## Expression-level preferences ###########
# Prefer null coalescing expressions to ternary operator checking
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0029-ide0030#dotnet_style_coalesce_expression
dotnet_style_coalesce_expression = true:warning
# Prefer collections to be initialized using collection initializers
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0028#dotnet_style_collection_initializer
dotnet_style_collection_initializer = true:warning
# Prefer tuple names to ItemX properties
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0033#dotnet_style_explicit_tuple_names
dotnet_style_explicit_tuple_names = true:warning
#  Prefer to use null-conditional operator when possible
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0031#dotnet_style_null_propagation
dotnet_style_null_propagation = true:warning
#prefer objects to be initialized using object initializers
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0017#dotnet_style_object_initializer
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line
#  Prefer auto properties over properties with private backing fields 
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0032#dotnet_style_prefer_auto_properties
dotnet_style_prefer_auto_properties = true:warning
# Prefer compound assignment expressions
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0054-ide0074
dotnet_style_prefer_compound_assignment = true:warning
# Prefer assignments with a ternary conditional over an if-else statement
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0045#dotnet_style_prefer_conditional_expression_over_assignment
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
# Prefer return statements to use a ternary conditional over an if-else statement
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0046#dotnet_style_prefer_conditional_expression_over_return
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
# Prefer inferred anonymous type member names
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0037#dotnet_style_prefer_inferred_anonymous_type_member_names
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
# Prefer inferred tuple element names
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0037#dotnet_style_prefer_inferred_tuple_names
dotnet_style_prefer_inferred_tuple_names = true:warning
# Prefer is null check over reference equality method
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0041#dotnet_style_prefer_is_null_check_over_reference_equality_method
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
# Prefer simplified conditional expressions
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0075#dotnet_style_prefer_simplified_boolean_expressions
dotnet_style_prefer_simplified_boolean_expressions = true:warning
# Prefer simplified interpolated strings
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0071#dotnet_style_prefer_simplified_interpolation
dotnet_style_prefer_simplified_interpolation = true:suggestion

########## Field preferences ###########
# Prefer that fields should be marked with readonly (C#) or ReadOnly (Visual Basic) if they are only ever assigned inline, or inside of a constructor
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0044
dotnet_style_readonly_field = true:warning

########## Parameter preferences ###########
# Flag methods with any accessibility that contain unused parameters
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0060
dotnet_code_quality_unused_parameters = all:warning

########## Suppression preferences  ###########
# enables the rule for all rule IDs and rule categories
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0079
dotnet_remove_unnecessary_suppression_exclusions = none

#########################################################
########### C# Coding Conventions
#########################################################

########## var preferences ###########
# prefer var over explicit type in all cases, unless overridden by another code style rule
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008#csharp_style_var_for_built_in_types
csharp_style_var_elsewhere = true:warning
# Prefer var is used to declare variables with built-in system types such as int
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008#csharp_style_var_for_built_in_types
csharp_style_var_for_built_in_types = true:warning
# prefer var when the type is already mentioned on the right-hand side of a declaration expression
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008#csharp_style_var_for_built_in_types
csharp_style_var_when_type_is_apparent = true:warning
# prefer inferred anonymous type member names
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0037#dotnet_style_prefer_inferred_anonymous_type_member_names
dotnet_style_prefer_inferred_anonymous_type_member_names = true
# Expression-bodied members
# Prefer expression bodies for accessors when they will be a single line
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0027#csharp_style_expression_bodied_accessors
csharp_style_expression_bodied_accessors = when_on_single_line:warning
#prefer block bodies for constructors
# Prefer block bodies for constructors
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0021#csharp_style_expression_bodied_constructors
csharp_style_expression_bodied_constructors = false:warning
# Prefer expression bodies for indexers
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0026#csharp_style_expression_bodied_indexers
csharp_style_expression_bodied_indexers = true:warning
# Prefer expression bodies for lambdas
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0053#csharp_style_expression_bodied_lambdas
csharp_style_expression_bodied_lambdas = when_on_single_line:warning
# Prefer expression bodies for local functions when they will be a single line
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0061#csharp_style_expression_bodied_local_functions
csharp_style_expression_bodied_local_functions = when_on_single_line:warning
# Prefer expression bodies for methods when they will be a single line
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0022#csharp_style_expression_bodied_methods
csharp_style_expression_bodied_methods = when_on_single_line:warning
# Prefer expression bodies for operators when they will be a single line
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0023-ide0024#csharp_style_expression_bodied_operators
csharp_style_expression_bodied_operators = when_on_single_line:warning
# Prefer expression bodies for properties
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0025#csharp_style_expression_bodied_properties
csharp_style_expression_bodied_properties = true:warning

########## Pattern matching preferences ###########
# Prefer pattern matching instead of as expressions with null checks to determine if something is of a particular type
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0019#csharp_style_pattern_matching_over_as_with_null_check
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
#  Prefer is expressions with type casts instead of pattern matching
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0020-ide0038#csharp_style_pattern_matching_over_is_with_cast_check
csharp_style_pattern_matching_over_is_with_cast_check = false:suggestion
# Missing doc
csharp_style_prefer_not_pattern = true:suggestion
# Prefer to use pattern matching constructs, when possible (introduced with C# 9.0)
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0078#csharp_style_prefer_pattern_matching
csharp_style_prefer_pattern_matching = true:suggestion
# Prefer to use a switch expression (introduced with C# 8.0)
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0066#csharp_style_prefer_switch_expression
csharp_style_prefer_switch_expression = true:suggestion

########## Null-checking preferences ###########
# Prefer to use the conditional coalescing operator (?.) when invoking a lambda expression, instead of performing a null check
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide1005#csharp_style_conditional_delegate_call
csharp_style_conditional_delegate_call = true:warning

########## Modifier preferences ###########
# Prefer local functions to be marked static
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0062#csharp_prefer_static_local_function
csharp_prefer_static_local_function = true:suggestion
# The style rules in this section concern specifying the desired modifier sort order.
# When this rule is set to a list of modifiers, prefer the specified ordering.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0036#csharp_preferred_modifier_order
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

########## Code-block preferences ###########
#prefer curly braces even for one line of code
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = false:warning

########## Expression-level preferences ###########
# Prefer default over default(T)
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0034#csharp_prefer_simple_default_expression
csharp_prefer_simple_default_expression = true:warning
# Prefer deconstructed variable declaration
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0042#csharp_style_deconstructed_variable_declaration
csharp_style_deconstructed_variable_declaration = true:warning
# Prefer out variables to be declared inline in the argument list of a method call when possible
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0018#csharp_style_inlined_variable_declaration
csharp_style_inlined_variable_declaration = true:warning
# Prefer local functions over anonymous functions
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0039#csharp_style_pattern_local_over_anonymous_function
csharp_style_pattern_local_over_anonymous_function = true:suggestion
# Prefer to use the ^ operator when calculating an index from the end of a collection
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0056#csharp_style_prefer_index_operator
csharp_style_prefer_index_operator = true:suggestion
# Prefer to use the range operator .. when extracting a "slice" of a collection
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0057#csharp_style_prefer_range_operator
csharp_style_prefer_range_operator = true:suggestion
# Prefer to use throw expressions instead of throw statements
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0016#csharp_style_throw_expression
csharp_style_throw_expression = true:warning
# Prefer to use a discard when assigning a value that's not used
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0059#csharp_style_unused_value_assignment_preference
csharp_style_unused_value_assignment_preference = discard_variable:warning
# Prefer to assign an unused expression to a discard
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0058#csharp_style_unused_value_expression_statement_preference
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

########## 'using' directive preferences ###########
# Prefer using directives to be placed outside the namespace

csharp_using_directive_placement = outside_namespace:warning
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0065#csharp_using_directive_placement
#########################################################
########### C# Formatting Rules
#########################################################

########## New line preferences ########## 
# Place catch statements on a new line.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_before_catch
csharp_new_line_before_catch = true
# Place else statements on a new line.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_before_else
csharp_new_line_before_else = true
# Require finally statements to be on a new line after the closing brace.
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_before_finally
csharp_new_line_before_finally = true
# Require members of anonymous types to be on separate lines
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_before_members_in_anonymous_types
csharp_new_line_before_members_in_anonymous_types = true
# Require members of object initializers to be on separate lines
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_before_members_in_object_initializers
csharp_new_line_before_members_in_object_initializers = true
# Require braces to be on a new line for all expressions ("Allman" style).
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_before_open_brace
csharp_new_line_before_open_brace = all
# Require elements of query expression clauses to be on separate lines
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_new_line_between_query_expression_clauses
csharp_new_line_between_query_expression_clauses = true

########## Indentation preferences ########## 
# Indent the content of the brackets
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_indent_block_contents
csharp_indent_block_contents = true
# Indent the brackets themselves
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_indent_braces
csharp_indent_braces = false
# Indent switch case contents
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_indent_case_contents
csharp_indent_case_contents = true
# Indent switch case brackets
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_indent_case_contents_when_block
csharp_indent_case_contents_when_block = true
# Labels are placed at the leftmost column
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_indent_labels
csharp_indent_labels = flush_left 
# Indent switch labels
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_indent_switch_labels
csharp_indent_switch_labels = true

########## Space preferences ########## 
#require NO space between a cast and the value
csharp_space_after_cast = false
# Place a space character after the colon for bases or interfaces in a type declaration
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_after_colon_in_inheritance_clause
csharp_space_after_colon_in_inheritance_clause = true
# Insert space after a comma
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_after_comma
csharp_space_after_comma = true
# Remove space after a dot
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_after_dot
csharp_space_after_dot = false
# Place a space character after a keyword in a control flow statement such as a for loop
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_after_keywords_in_control_flow_statements 
csharp_space_after_keywords_in_control_flow_statements = true
# Insert space after each semicolon in a for statement
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_after_semicolon_in_for_statement
csharp_space_after_semicolon_in_for_statement = true
# Insert space before and after the binary operator
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_around_binary_operators
csharp_space_around_binary_operators = before_and_after
# Remove extra space characters in declaration statements 
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_around_declaration_statements
csharp_space_around_declaration_statements = false
# Place a space character before the colon for bases or interfaces in a type declaration
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_before_colon_in_inheritance_clause
csharp_space_before_colon_in_inheritance_clause = true
# Remove space before a comma
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_before_comma
csharp_space_before_comma = false
# Remove space before a dot
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_before_dot
csharp_space_before_dot = false
# Remove space before opening square brackets [
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_before_open_square_brackets
csharp_space_before_open_square_brackets = false
# Insert space before each semicolon in a for statement
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_before_semicolon_in_for_statement
csharp_space_before_semicolon_in_for_statement = true
# Remove space between empty square brackets []
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_empty_square_brackets
csharp_space_between_empty_square_brackets = false
# Remove space within empty argument list parentheses
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_method_call_empty_parameter_list_parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
# Remove space between method call name and opening parenthesis
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_method_call_name_and_opening_parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
# Remove space characters after the opening parenthesis and before the closing parenthesis of a method call
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_method_call_parameter_list_parentheses
csharp_space_between_method_call_parameter_list_parentheses = false
# Remove space within empty parameter list parentheses for a method declaration
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_method_declaration_empty_parameter_list_parentheses
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#  Remove space characters between the method name and opening parenthesis in the method declaration
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_method_declaration_name_and_open_parenthesis
csharp_space_between_method_declaration_name_and_open_parenthesis = false
# Remove space characters after the opening parenthesis and before the closing parenthesis of a method declaration parameter list
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_method_declaration_parameter_list_parentheses
csharp_space_between_method_declaration_parameter_list_parentheses = false
# Place space between parentheses of expressions
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_parentheses
csharp_space_between_parentheses = expressions
# Remove space characters in non-empty square brackets [0]
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_space_between_square_brackets
csharp_space_between_square_brackets = false

##########  Wrapping preferences ########## 
# Leave code block on single line
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_preserve_single_line_blocks
csharp_preserve_single_line_blocks = true
# Leave statements and member declarations on different lines
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#csharp_preserve_single_line_statements
csharp_preserve_single_line_statements = false

#########################################################
########### Naming styles
#########################################################

########## Naming rules ########## 

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

########## Symbol specifications ########## 

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

########## Naming styles ########## 

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

[*.{csproj,csproj.user,config,md,yml}]
indent_style = space
indent_size = 2
charset = utf-8

[*.{csproj,csproj.user,config}]
insert_final_newline = false
charset = utf-8

[*.{csproj,csproj.user,config,sln.DotSettings}]
charset = utf-8